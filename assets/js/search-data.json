{
  
    
        "post0": {
            "title": "Web Scrapping Real Estate Data",
            "content": "Goal of the notebook: . To get data of houses being listed for sale on Realtor.com . Future aim is to make predictions from the data . TO DO: . 1) Make proper markdowns in the notebooks . 2) Improve variable names and code structure . 3) Check whether data is accurate using regex or do it manually or visually . 4) TRY stuff from the above links (see all) . 5) Follow a ML pipeline for prediction -- make a model . 6) Make a verdict . 7) Write a report . 8) Deploy the model (maybe using flask or django or some other way) . Sources Used and Unused: . The links lead to tuorials of web scrapping (different methods) or searching using regex . https://www.realtor.com/realestateandhomes-search/Palo-Alto_CA . https://www.youtube.com/watch?v=RvCBzhhydNk . https://medium.com/@raiyanquaium/how-to-web-scrape-using-beautiful-soup-in-python-without-running-into-http-error-403-554875e5abed#:~:text=This%20will%20result%20in%20a,security%20features%20to%20prevent%20bots. . https://youtu.be/iESyyogOkY0 https://www.geeksforgeeks.org/python-extract-words-from-given-string/ https://medium.com/quantrium-tech/extracting-words-from-a-string-in-python-using-regex-dac4b385c1b8 https://www.guru99.com/python-regular-expressions-complete-tutorial.html . https://kanoki.org/2019/11/12/how-to-use-regex-in-pandas/ . https://youtu.be/Z7LEv7nHqqk . https://youtu.be/a3Cuq2csLWk . https://youtu.be/pzptMqULnyE . https://youtu.be/dRcvJRmqFHQ . https://youtu.be/FJLpUsRFT00 . https://www.youtube.com/watch?v=CwMei_VhHHQ . from bs4 import BeautifulSoup # web scrapping package from urllib.request import Request, urlopen # since we will send a request to a web page and we will get a response back (some html) import requests from csv import writer . url = &quot;https://www.realtor.com/realestateandhomes-search/Palo-Alto_CA&quot; . requests = Request(url, headers={&#39;User-Agent&#39;:&#39;Mozilla/5.0&#39;}) #print(requests) . webpage = urlopen(requests).read() #print(webpage) . soup = BeautifulSoup(webpage, &quot;html.parser&quot;) #print(soup) . # the second argument is &quot;class_&quot; instead of just &quot;class&quot; beacuse we are dealing with css find_price_content = soup.find_all(&quot;span&quot;, class_=&quot;rui__x3geed-0 kitA-dS&quot;) find_address_content = soup.find_all(&quot;div&quot;, class_=&quot;jsx-1489967104 address ellipsis srp-page-address srp-address-redesign&quot;) find_space_content = soup.find_all(&quot;ul&quot;, class_=&quot;jsx-946479843 property-meta list-unstyled property-meta-srpPage&quot;)#joint no space . price = [] for i in find_price_content: price.append(i.text) address = [] for i in find_address_content: address.append(i.text) space = [] for i in find_space_content: space.append(i.text) . print(space) . [&#39;2bed1bath660sqft2,325sqft lot&#39;, &#39;2bed1bath865sqft875sqft lot&#39;, &#39;2bed2.5bath1,230sqft630sqft lot&#39;, &#39;2bed2bath1,440sqft&#39;, &#39;3bed1bath1,004sqft7,748sqft lot&#39;, &#39;2bed3bath1,490sqft961sqft lot&#39;, &#39;2bed1bath943sqft&#39;, &#39;5bed5bath4,003sqft9,523sqft lot&#39;, &#39;4bed2bath1,554sqft6,292sqft lot&#39;, &#39;2bed2.5bath1,295sqft630sqft lot&#39;, &#39;4bed2bath2,066sqft5,849sqft lot&#39;, &#39;1bed1bath885sqft&#39;, &#39;3bed2bath1,710sqft9,400sqft lot&#39;, &#39;2bed2.5bath1,468sqft&#39;, &#39;2bed1bath1,091sqft&#39;, &#39;4bed3.5+bath4,540sqft1.02acre lot&#39;, &#39;5bed4.5+bath5,042sqft8,755sqft lot&#39;, &#39;3bed2bath1,583sqft6,500sqft lot&#39;, &#39;1bed1bath876sqft&#39;, &#39;2bed1bath946sqft&#39;, &#39;2bed2bath773sqft2,000sqft lot&#39;, &#39;6bed5bath3,456sqft7,670sqft lot&#39;, &#39;5bed4bath2,871sqft5,000sqft lot&#39;, &#39;5bed4bath3,072sqft7,605sqft lot&#39;, &#39;6bed5.5bath3,853sqft6,382sqft lot&#39;, &#39;4bed2bath1,639sqft7,084sqft lot&#39;, &#39;4bed2bath1,664sqft6,504sqft lot&#39;, &#39;3bed2.5bath1,494sqft&#39;, &#39;4bed2.5bath2,697sqft8,508sqft lot&#39;, &#39;4bed3bath2,410sqft6,380sqft lot&#39;, &#39;2bed2bath1,015sqft&#39;, &#39;2bed2.5bath1,968sqft0.24acre lot&#39;, &#39;3bed2bath1,686sqft7,620sqft lot&#39;, &#39;5bed5bath3,713sqft7,500sqft lot&#39;, &#39;4bed3.5bath3,000sqft8,094sqft lot&#39;, &#39;4bed3bath2,383sqft8,910sqft lot&#39;, &#39;4bed2.5bath2,046sqft7,386sqft lot&#39;, &#39;3bed2bath1,479sqft8,801sqft lot&#39;, &#39;8bed3,120sqft6,749sqft lot&#39;, &#39;10bed4,266sqft8,919sqft lot&#39;, &#39;5bed4bath3,085sqft6,050sqft lot&#39;, &#39;4bed4bath2,618sqft6,000sqft lot&#39;] . def regex_check_for_space(l, regex_string, original_string): &quot;&quot;&quot; Goal of the function was to mainly remove redundant code &quot;&quot;&quot; if regex_string is None: l.append(original_string) else: l.append(regex_string.group()) return l . # we seperate the data # Regular Expression package import re beds = [] bath = [] area = [] area_lot = [] for i in space: search_bed = re.search(pattern=&quot;[0-9]+bed&quot;, string=i) regex_check_for_space(beds, search_bed, i) search_bath = re.search(pattern=&quot;[0-9]+bath&quot;, string=i) regex_check_for_space(bath, search_bath, i) # area lot is checked before because both area and area lot have the sqft word in commmon search_area_lot = re.search(pattern=&quot;[0-9]+sqft slot|[0-9]+,+[0-9]+sqft slot&quot;, string=i) regex_check_for_space(area_lot, search_area_lot, i) search_area = re.search(pattern=&quot;[0-9]+sqft|[0-9]+,+[0-9]+sqft&quot;, string=i) regex_check_for_space(area, search_area, i) . for i in zip(price, address, space, beds, bath, area, area_lot): print(i) . (&#39;$1,599,000&#39;, &#39;736 Homer Ave, Palo Alto, CA 94301&#39;, &#39;2bed1bath660sqft2,325sqft lot&#39;, &#39;2bed&#39;, &#39;1bath&#39;, &#39;660sqft&#39;, &#39;2,325sqft lot&#39;) (&#39;$1,098,000&#39;, &#39;280 Waverley St, Palo Alto, CA 94301&#39;, &#39;2bed1bath865sqft875sqft lot&#39;, &#39;2bed&#39;, &#39;1bath&#39;, &#39;865sqft&#39;, &#39;875sqft lot&#39;) (&#39;$1,380,000&#39;, &#39;2585 Park Blvd Apt Z206, Palo Alto, CA 94306&#39;, &#39;2bed2.5bath1,230sqft630sqft lot&#39;, &#39;2bed&#39;, &#39;5bath&#39;, &#39;1,230sqft&#39;, &#39;630sqft lot&#39;) (&#39;$1,790,000&#39;, &#39;101 Alma St Apt 805, Palo Alto, CA 94301&#39;, &#39;2bed2bath1,440sqft&#39;, &#39;2bed&#39;, &#39;2bath&#39;, &#39;1,440sqft&#39;, &#39;2bed2bath1,440sqft&#39;) (&#39;$1,795,000&#39;, &#39;3109 Maddux Dr, Palo Alto, CA 94303&#39;, &#39;3bed1bath1,004sqft7,748sqft lot&#39;, &#39;3bed&#39;, &#39;1bath&#39;, &#39;1,004sqft&#39;, &#39;7,748sqft lot&#39;) (&#39;$1,850,000&#39;, &#39;685 High St Apt 5F, Palo Alto, CA 94301&#39;, &#39;2bed3bath1,490sqft961sqft lot&#39;, &#39;2bed&#39;, &#39;3bath&#39;, &#39;1,490sqft&#39;, &#39;961sqft lot&#39;) (&#39;$949,000&#39;, &#39;4250 El Camino Real Apt A307, Palo Alto, CA 94306&#39;, &#39;2bed1bath943sqft&#39;, &#39;2bed&#39;, &#39;1bath&#39;, &#39;943sqft&#39;, &#39;2bed1bath943sqft&#39;) (&#39;$9,500,000&#39;, &#39;2111 Barbara Dr, Palo Alto, CA 94303&#39;, &#39;5bed5bath4,003sqft9,523sqft lot&#39;, &#39;5bed&#39;, &#39;5bath&#39;, &#39;4,003sqft&#39;, &#39;9,523sqft lot&#39;) (&#39;$3,100,000&#39;, &#39;274 Tennessee Ln, Palo Alto, CA 94306&#39;, &#39;4bed2bath1,554sqft6,292sqft lot&#39;, &#39;4bed&#39;, &#39;2bath&#39;, &#39;1,554sqft&#39;, &#39;6,292sqft lot&#39;) (&#39;$1,698,000&#39;, &#39;1345 Alma St, Palo Alto, CA 94301&#39;, &#39;2bed2.5bath1,295sqft630sqft lot&#39;, &#39;2bed&#39;, &#39;5bath&#39;, &#39;1,295sqft&#39;, &#39;630sqft lot&#39;) (&#39;$3,999,888&#39;, &#39;485 Marion Ave, Palo Alto, CA 94301&#39;, &#39;4bed2bath2,066sqft5,849sqft lot&#39;, &#39;4bed&#39;, &#39;2bath&#39;, &#39;2,066sqft&#39;, &#39;5,849sqft lot&#39;) (&#39;$875,000&#39;, &#39;4250 El Camino Real Apt A102, Palo Alto, CA 94306&#39;, &#39;1bed1bath885sqft&#39;, &#39;1bed&#39;, &#39;1bath&#39;, &#39;885sqft&#39;, &#39;1bed1bath885sqft&#39;) (&#39;$3,100,000&#39;, &#39;4233 Los Palos Ave, Palo Alto, CA 94306&#39;, &#39;3bed2bath1,710sqft9,400sqft lot&#39;, &#39;3bed&#39;, &#39;2bath&#39;, &#39;1,710sqft&#39;, &#39;9,400sqft lot&#39;) (&#39;$1,850,000&#39;, &#39;685 High St Apt 2C, Palo Alto, CA 94301&#39;, &#39;2bed2.5bath1,468sqft&#39;, &#39;2bed&#39;, &#39;5bath&#39;, &#39;1,468sqft&#39;, &#39;2bed2.5bath1,468sqft&#39;) (&#39;$1,399,000&#39;, &#39;518 Everett Ave Apt A, Palo Alto, CA 94301&#39;, &#39;2bed1bath1,091sqft&#39;, &#39;2bed&#39;, &#39;1bath&#39;, &#39;1,091sqft&#39;, &#39;2bed1bath1,091sqft&#39;) (&#39;$10,495,000&#39;, &#39;27 Crescent Dr, Palo Alto, CA 94301&#39;, &#39;4bed3.5+bath4,540sqft1.02acre lot&#39;, &#39;4bed&#39;, &#39;4bed3.5+bath4,540sqft1.02acre lot&#39;, &#39;4,540sqft&#39;, &#39;4bed3.5+bath4,540sqft1.02acre lot&#39;) (&#39;$9,280,000&#39;, &#39;2001 Webster St, Palo Alto, CA 94301&#39;, &#39;5bed4.5+bath5,042sqft8,755sqft lot&#39;, &#39;5bed&#39;, &#39;5bed4.5+bath5,042sqft8,755sqft lot&#39;, &#39;5,042sqft&#39;, &#39;8,755sqft lot&#39;) (&#39;$2,995,000&#39;, &#39;3894 Corina Way, Palo Alto, CA 94303&#39;, &#39;3bed2bath1,583sqft6,500sqft lot&#39;, &#39;3bed&#39;, &#39;2bath&#39;, &#39;1,583sqft&#39;, &#39;6,500sqft lot&#39;) (&#39;$1,099,000&#39;, &#39;3073 Middlefield Rd Apt 101, Palo Alto, CA 94306&#39;, &#39;1bed1bath876sqft&#39;, &#39;1bed&#39;, &#39;1bath&#39;, &#39;876sqft&#39;, &#39;1bed1bath876sqft&#39;) (&#39;$998,000&#39;, &#39;777 San Antonio Rd Apt 4, Palo Alto, CA 94303&#39;, &#39;2bed1bath946sqft&#39;, &#39;2bed&#39;, &#39;1bath&#39;, &#39;946sqft&#39;, &#39;2bed1bath946sqft&#39;) (&#39;$2,395,000&#39;, &#39;678 Hawthorne Ave, Palo Alto, CA 94301&#39;, &#39;2bed2bath773sqft2,000sqft lot&#39;, &#39;2bed&#39;, &#39;2bath&#39;, &#39;773sqft&#39;, &#39;2,000sqft lot&#39;) (&#39;$5,968,000&#39;, &#39;919 Amarillo Ave, Palo Alto, CA 94303&#39;, &#39;6bed5bath3,456sqft7,670sqft lot&#39;, &#39;6bed&#39;, &#39;5bath&#39;, &#39;3,456sqft&#39;, &#39;7,670sqft lot&#39;) (&#39;$2,998,000&#39;, &#39;3661 Park Blvd, Palo Alto, CA 94306&#39;, &#39;5bed4bath2,871sqft5,000sqft lot&#39;, &#39;5bed&#39;, &#39;4bath&#39;, &#39;2,871sqft&#39;, &#39;5,000sqft lot&#39;) (&#39;$4,488,000&#39;, &#39;10 Crescent Dr, Palo Alto, CA 94301&#39;, &#39;5bed4bath3,072sqft7,605sqft lot&#39;, &#39;5bed&#39;, &#39;4bath&#39;, &#39;3,072sqft&#39;, &#39;7,605sqft lot&#39;) (&#39;$4,988,888&#39;, &#39;3424 Cowper Ct, Palo Alto, CA 94306&#39;, &#39;6bed5.5bath3,853sqft6,382sqft lot&#39;, &#39;6bed&#39;, &#39;5bath&#39;, &#39;3,853sqft&#39;, &#39;6,382sqft lot&#39;) (&#39;$2,500,000&#39;, &#39;971 Oregon Ave, Palo Alto, CA 94303&#39;, &#39;4bed2bath1,639sqft7,084sqft lot&#39;, &#39;4bed&#39;, &#39;2bath&#39;, &#39;1,639sqft&#39;, &#39;7,084sqft lot&#39;) (&#39;$2,998,000&#39;, &#39;47 Roosevelt Cir, Palo Alto, CA 94306&#39;, &#39;4bed2bath1,664sqft6,504sqft lot&#39;, &#39;4bed&#39;, &#39;2bath&#39;, &#39;1,664sqft&#39;, &#39;6,504sqft lot&#39;) (&#39;$1,688,000&#39;, &#39;767 Loma Verde Ave Unit B, Palo Alto, CA 94303&#39;, &#39;3bed2.5bath1,494sqft&#39;, &#39;3bed&#39;, &#39;5bath&#39;, &#39;1,494sqft&#39;, &#39;3bed2.5bath1,494sqft&#39;) (&#39;$6,500,000&#39;, &#39;606 Santa Rita Ave, Palo Alto, CA 94301&#39;, &#39;4bed2.5bath2,697sqft8,508sqft lot&#39;, &#39;4bed&#39;, &#39;5bath&#39;, &#39;2,697sqft&#39;, &#39;8,508sqft lot&#39;) (&#39;$3,998,000&#39;, &#39;872 Boyce Ave, Palo Alto, CA 94301&#39;, &#39;4bed3bath2,410sqft6,380sqft lot&#39;, &#39;4bed&#39;, &#39;3bath&#39;, &#39;2,410sqft&#39;, &#39;6,380sqft lot&#39;) (&#39;$1,598,000&#39;, &#39;436 High St Apt 105, Palo Alto, CA 94301&#39;, &#39;2bed2bath1,015sqft&#39;, &#39;2bed&#39;, &#39;2bath&#39;, &#39;1,015sqft&#39;, &#39;2bed2bath1,015sqft&#39;) (&#39;$4,450,000&#39;, &#39;530 Jefferson Dr, Palo Alto, CA 94303&#39;, &#39;2bed2.5bath1,968sqft0.24acre lot&#39;, &#39;2bed&#39;, &#39;5bath&#39;, &#39;1,968sqft&#39;, &#39;2bed2.5bath1,968sqft0.24acre lot&#39;) (&#39;$2,988,000&#39;, &#39;3760 El Centro St, Palo Alto, CA 94306&#39;, &#39;3bed2bath1,686sqft7,620sqft lot&#39;, &#39;3bed&#39;, &#39;2bath&#39;, &#39;1,686sqft&#39;, &#39;7,620sqft lot&#39;) (&#39;$4,488,000&#39;, &#39;118 Churchill Ave, Palo Alto, CA 94301&#39;, &#39;5bed5bath3,713sqft7,500sqft lot&#39;, &#39;5bed&#39;, &#39;5bath&#39;, &#39;3,713sqft&#39;, &#39;7,500sqft lot&#39;) (&#39;$5,695,000&#39;, &#39;776 Rosewood Dr, Palo Alto, CA 94303&#39;, &#39;4bed3.5bath3,000sqft8,094sqft lot&#39;, &#39;4bed&#39;, &#39;5bath&#39;, &#39;3,000sqft&#39;, &#39;8,094sqft lot&#39;) (&#39;$3,488,000&#39;, &#39;3349 Saint Michael Ct, Palo Alto, CA 94306&#39;, &#39;4bed3bath2,383sqft8,910sqft lot&#39;, &#39;4bed&#39;, &#39;3bath&#39;, &#39;2,383sqft&#39;, &#39;8,910sqft lot&#39;) (&#39;$4,798,000&#39;, &#39;2388 Waverley St, Palo Alto, CA 94301&#39;, &#39;4bed2.5bath2,046sqft7,386sqft lot&#39;, &#39;4bed&#39;, &#39;5bath&#39;, &#39;2,046sqft&#39;, &#39;7,386sqft lot&#39;) (&#39;$2,900,000&#39;, &#39;3421 Kenneth Dr, Palo Alto, CA 94303&#39;, &#39;3bed2bath1,479sqft8,801sqft lot&#39;, &#39;3bed&#39;, &#39;2bath&#39;, &#39;1,479sqft&#39;, &#39;8,801sqft lot&#39;) (&#39;$3,200,000&#39;, &#39;290 Curtner Ave, Palo Alto, CA 94306&#39;, &#39;8bed3,120sqft6,749sqft lot&#39;, &#39;8bed&#39;, &#39;8bed3,120sqft6,749sqft lot&#39;, &#39;3,120sqft&#39;, &#39;6,749sqft lot&#39;) (&#39;$4,200,000&#39;, &#39;4211 McKellar Ln, Palo Alto, CA 94306&#39;, &#39;10bed4,266sqft8,919sqft lot&#39;, &#39;10bed&#39;, &#39;10bed4,266sqft8,919sqft lot&#39;, &#39;4,266sqft&#39;, &#39;8,919sqft lot&#39;) (&#39;$4,280,000&#39;, &#39;1031 Embarcadero Rd, Palo Alto, CA 94303&#39;, &#39;5bed4bath3,085sqft6,050sqft lot&#39;, &#39;5bed&#39;, &#39;4bath&#39;, &#39;3,085sqft&#39;, &#39;6,050sqft lot&#39;) (&#39;$4,050,000&#39;, &#39;220 Matadero Ave, Palo Alto, CA 94306&#39;, &#39;4bed4bath2,618sqft6,000sqft lot&#39;, &#39;4bed&#39;, &#39;4bath&#39;, &#39;2,618sqft&#39;, &#39;6,000sqft lot&#39;) . import pandas as pd df = pd.DataFrame(list(zip(price, address, space, beds, bath, area, area_lot))) print(df.head()) . 0 1 0 $1,599,000 736 Homer Ave, Palo Alto, CA 94301 1 $1,098,000 280 Waverley St, Palo Alto, CA 94301 2 $1,380,000 2585 Park Blvd Apt Z206, Palo Alto, CA 94306 3 $1,790,000 101 Alma St Apt 805, Palo Alto, CA 94301 4 $1,795,000 3109 Maddux Dr, Palo Alto, CA 94303 2 3 4 5 6 0 2bed1bath660sqft2,325sqft lot 2bed 1bath 660sqft 2,325sqft lot 1 2bed1bath865sqft875sqft lot 2bed 1bath 865sqft 875sqft lot 2 2bed2.5bath1,230sqft630sqft lot 2bed 5bath 1,230sqft 630sqft lot 3 2bed2bath1,440sqft 2bed 2bath 1,440sqft 2bed2bath1,440sqft 4 3bed1bath1,004sqft7,748sqft lot 3bed 1bath 1,004sqft 7,748sqft lot . Import to CSV . df.to_csv(&#39;Palo Alto houses form realtor.csv&#39;, sep=&#39; t&#39;) .",
            "url": "https://amaan784.github.io/fastai-fastpages-template/2022/05/13/Web-Scrapping-Realtor-Data.html",
            "relUrl": "/2022/05/13/Web-Scrapping-Realtor-Data.html",
            "date": " • May 13, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://amaan784.github.io/fastai-fastpages-template/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://amaan784.github.io/fastai-fastpages-template/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://amaan784.github.io/fastai-fastpages-template/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://amaan784.github.io/fastai-fastpages-template/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}